function automationScriptCheckerFn(app,automationScriptFile,automationScriptPath)
% automationScriptCheckerFn() -
% parses the selected automation script for ASAP.
%
% Syntax -
% automationScriptCheckerFn(app,automationScriptFile,automationScriptPath).
%
% Parameters -
% - app: ASAP UI class
% - automationScriptFile: name of automation script file.
% - automationScriptPath: path of automation script file.
%
% Copyright -
% John S. H. Danial (2018).
% danial@is.mpg.de

global msg;

%% opening file
try
    file = fopen(fullfile(automationScriptPath,automationScriptFile));
catch
    app.MsgBox.Value = [app.MsgBox.Value ;...
        sprintf('%s','ASAP error 3: cannot open selected file.')];
    return;
end

%% reading number of image files
cd(app.pr_inputPath);
list = dir ('**/*');
numFiles = 0;
for index = 1 : numel(list)
    [~,~,extension] = fileparts(list(index).name);
    switch lower(extension)
        case {'.png','.tif','.jpg'}
            numFiles = numFiles + 1;
    end
end

%% reading shapes from classification model file
try
    app.pr_fileList = retrieveFilesAuxFn(app.pr_inputPath,'.astr');
    extractFn(app);
    shapes = app.pr_trainingData.shapes;
catch
    app.MsgBox.Value = [app.MsgBox.Value ;...
        sprintf('%s','ASAP error: cannot retrieve data from classification model file.')];
    return;
end

%% initializing structs
options = struct;
simulationParam = struct;
identificationParam = struct;
analysisParam = struct;
classificationParam = struct;
clusteringParam = struct;
plottingParam = struct;
montagingParam = struct;

%% initializing line count
lineCount = 1;

%% reading file until end
while ~feof(file)
    
    %% reading current line
    currentLine = fgetl(file);
    
    %% initializing returnFlag
    returnFlag = false;
    
    %% setting up error messages
    msg{1} = strcat("ASAP error 4: line ",num2str(lineCount)," of the selected text file cannot be read. Check for typos in property definition.");
    msg{2} = strcat("ASAP error 5: line ",num2str(lineCount)," of the selected text file cannot be read. Incomplete property definition.");
    msg{3} = strcat("ASAP error 6: line ",num2str(lineCount)," of the selected text file cannot be read. Check for typos.");
    msg{4} = strcat("ASAP error 7: line ",num2str(lineCount)," of the selected text file cannot be read. Check assigned value(s).");
    msg{5} = strcat("ASAP error 8: line ",num2str(lineCount)," of the selected text file cannot be read. No GPU device available.");
    msg{6} = strcat("ASAP error 9: line ",num2str(lineCount)," of the selected text file cannot be read. Check number of assigned value(s).");
    msg{7} = strcat("ASAP error 10: line ",num2str(lineCount)," of the selected text file cannot be read. Check bounds.");
    
    if ~isempty(currentLine)
        switch currentLine(1)
            case '%'
                
                %% do nothing
                
            case 'a'
                switch currentLine(1:14)
                    
                    %% reading analysis parameters
                    case 'analysisParam.'
                        seperator = strfind(currentLine(15:end),'=');
                        if ~isempty(seperator)
                            subParam = currentLine(15:15 + seperator - 2);
                            value = strsplit(currentLine(15 + seperator:end),';');
                            switch subParam
                                case 'analyze'
                                    switch value{1}
                                        case {'true','false'}
                                            analysisParam.analyze = value{1};
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{4})];
                                            return;
                                    end
                                case 'pixelSize'
                                    [returnFlag,analysisParam] = StructAssigner(app,...
                                        analysisParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'analysisPlatform'
                                    [returnFlag,analysisParam] = StructAssigner(app,...
                                        analysisParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        2 * numFiles,...
                                        {'CPU','GPU'});
                                case 'analysisMode'
                                    [returnFlag,analysisParam] = StructAssigner(app,...
                                        analysisParam,...
                                        subParam,...
                                        value,...
                                        'stringArray',...
                                        2 * numFiles,...
                                        {'Pixel counting','Ellipse fitting','Radial profiling'});
                                case 'maxRingSize'
                                    [returnFlag,analysisParam] = StructAssigner(app,...
                                        analysisParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        1,...
                                        NaN);
                                case 'operations'
                                    [returnFlag,analysisParam] = StructAssigner(app,...
                                        analysisParam,...
                                        subParam,...
                                        value,...
                                        'stringArray',...
                                        2 * numFiles,...
                                        {'None','Fill','Bridge','Close','Open','Clear','Rotate','Center','Resize'});
                                otherwise
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{1})];
                                    return;
                            end
                            if returnFlag
                                return;
                            end
                        else
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{2})];
                            return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            case 'c'
                switch currentLine(1:3)
                    case 'clu'
                        switch currentLine(1:16)
                            
                            %% reading clustering parameters
                            case 'clusteringParam.'
                                seperator = strfind(currentLine(17:end),'=');
                                if ~isempty(seperator)
                                    subParam = currentLine(17:17 + seperator - 2);
                                    value = strsplit(currentLine(17 + seperator:end),';');
                                    switch subParam
                                        case 'cluster'
                                            switch value{1}
                                                case {'true','false'}
                                                    clusteringParam.cluster = value{1};
                                                otherwise
                                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                                        sprintf('%s',msg{4})];
                                                    return;
                                            end
                                        case 'shape'
                                            [returnFlag,clusteringParam] = StructAssigner(app,...
                                                clusteringParam,...
                                                subParam,...
                                                value,...
                                                'stringArray',...
                                                2 * numFiles,...
                                                shapes);
                                        case 'descriptor'
                                            [returnFlag,clusteringParam] = StructAssigner(app,...
                                                clusteringParam,...
                                                subParam,...
                                                value,...
                                                'stringArray',...
                                                2 * numFiles,...
                                                '');
                                        case 'clusteringMode'
                                            [returnFlag,clusteringParam] = StructAssigner(app,...
                                                clusteringParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                2 * numFiles,...
                                                {'Centroid','Gaussian Mixture'});
                                        case 'clusterAll'
                                            [returnFlag,clusteringParam] = StructAssigner(app,...
                                                clusteringParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                2 * numFiles,...
                                                {'true','false'});
                                        case 'numClustersKnown'
                                            [returnFlag,clusteringParam] = StructAssigner(app,...
                                                clusteringParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                2 * numFiles,...
                                                {'true','false'});
                                        case 'numClusters'
                                            [returnFlag,clusteringParam] = StructAssigner(app,...
                                                clusteringParam,...
                                                subParam,...
                                                value,...
                                                'numerical',...
                                                2 * numFiles,...
                                                1,...
                                                NaN);
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{1})];
                                            return;
                                    end
                                    if returnFlag
                                        return;
                                    end
                                else
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{2})];
                                    return;
                                end
                            otherwise
                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                    sprintf('%s',msg{3})];
                                return;
                        end
                    case 'cla'
                        switch currentLine(1:20)
                            
                            %% reading classification parameters
                            case 'classificationParam.'
                                seperator = strfind(currentLine(21:end),'=');
                                if ~isempty(seperator)
                                    subParam = currentLine(21:21 + seperator - 2);
                                    value = strsplit(currentLine(21 + seperator:end),';');
                                    switch subParam
                                        case 'classify'
                                            switch value{1}
                                                case {'true','false'}
                                                    classificationParam.classify = value{1};
                                                otherwise
                                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                                        sprintf('%s',msg{4})];
                                                    return;
                                            end
                                        case 'assignmentNum'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'numerical',...
                                                2 * numFiles,...
                                                -1,...
                                                NaN);
                                        case 'shapeBefore'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'stringArrayAssignment',...
                                                2 * numFiles,...
                                                shapes);
                                        case 'shapeAfter'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'stringArrayAssignment',...
                                                2 * numFiles,...
                                                shapes);
                                        case 'descriptor'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'stringArrayAssignment',...
                                                2 * numFiles,...
                                                '');
                                        case 'firstBound'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'numericalArrayAssignment',...
                                                2 * numFiles,...
                                                0,...
                                                NaN);
                                        case 'secondBound'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'numericalArrayAssignment',...
                                                2 * numFiles,...
                                                0,...
                                                NaN);
                                        case 'includeSecondBound'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'stringArrayAssignment',...
                                                2 * numFiles,...
                                                {'true','false'});
                                        case 'firstEquality'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'stringArrayAssignment',...
                                                2 * numFiles,...
                                                {'=','>','<'});
                                        case 'secondEquality'
                                            [returnFlag,classificationParam] = StructAssigner(app,...
                                                classificationParam,...
                                                subParam,...
                                                value,...
                                                'stringArrayAssignment',...
                                                2 * numFiles,...
                                                {'=','>','<'});
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{1})];
                                            return;
                                    end
                                    if returnFlag
                                        return;
                                    end
                                else
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{2})];
                                    return;
                                end
                            otherwise
                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                    sprintf('%s',msg{3})];
                                return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            case 'm'
                switch currentLine(1:15)
                    
                    %% reading montaging parameters
                    case 'montagingParam.'
                        seperator = strfind(currentLine(16:end),'=');
                        if ~isempty(seperator)
                            subParam = currentLine(16:16 + seperator(1) - 2);
                            value = strsplit(currentLine(16 + seperator(1):end),';');
                            switch subParam
                                case 'montage'
                                    switch value{1}
                                        case {'true','false'}
                                            montagingParam.montage = value{1};
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{4})];
                                            return;
                                    end
                                case 'numImages'
                                    currentValue = str2double(value{1});
                                    if ~isnan(currentValue)
                                        montagingParam.numImages = currentValue;
                                    else
                                        app.MsgBox.Value = [app.MsgBox.Value ;...
                                            sprintf('%s',msg{4})];
                                        return;
                                    end
                                case 'imageSize'
                                    currentValue = str2double(value{1});
                                    if ~isnan(currentValue)
                                        montagingParam.imageSize = currentValue;
                                    else
                                        app.MsgBox.Value = [app.MsgBox.Value ;...
                                            sprintf('%s',msg{4})];
                                        return;
                                    end
                                case 'fontSize'
                                    currentValue = str2double(value{1});
                                    if ~isnan(currentValue)
                                        montagingParam.fontSize = currentValue;
                                    else
                                        app.MsgBox.Value = [app.MsgBox.Value ;...
                                            sprintf('%s',msg{4})];
                                        return;
                                    end
                                case 'includeBinned'
                                    [returnFlag,montagingParam] = StructAssigner(app,...
                                        montagingParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        montagingParam.numImages,...
                                        {'true','false'});
                                case 'label'
                                    [returnFlag,montagingParam] = StructAssigner(app,...
                                        montagingParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        montagingParam.numImages,...
                                        '');
                                case 'scale'
                                    [returnFlag,montagingParam] = StructAssigner(app,...
                                        montagingParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        montagingParam.numImages,...
                                        0,...
                                        NaN);
                                case 'file'
                                    [returnFlag,montagingParam] = StructAssigner(app,...
                                        montagingParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        montagingParam.numImages,...
                                        1,...
                                        numFiles + 1);
                                case 'shape'
                                    [returnFlag,montagingParam] = StructAssigner(app,...
                                        montagingParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        montagingParam.numImages,...
                                        shapes);
                                case 'rowNum'
                                    currentValue = str2double(value{1});
                                    if ~isnan(currentValue)
                                        montagingParam.rowNum = currentValue;
                                    else
                                        app.MsgBox.Value = [app.MsgBox.Value ;...
                                            sprintf('%s',msg{4})];
                                        return;
                                    end
                                case 'colNum'
                                    currentValue = str2double(value{1});
                                    if ~isnan(currentValue)
                                        montagingParam.colNum = currentValue;
                                    else
                                        app.MsgBox.Value = [app.MsgBox.Value ;...
                                            sprintf('%s',msg{4})];
                                        return;
                                    end
                                otherwise
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{1})];
                                    return;
                            end
                            if returnFlag
                                return;
                            end
                        else
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{2})];
                            return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            case 'i'
                switch currentLine(1:20)
                    
                    %% reading identification parameters
                    case 'identificationParam.'
                        seperator = strfind(currentLine(21:end),'=');
                        if ~isempty(seperator)
                            subParam = currentLine(21:21 + seperator(1) - 2);
                            value = strsplit(currentLine(21 + seperator(1):end),';');
                            switch subParam
                                case 'identify'
                                    switch value{1}
                                        case {'true','false'}
                                            identificationParam.identify = value{1};
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{4})];
                                            return;
                                    end
                                case 'segment'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        2 * numFiles,...
                                        {'true','false'});
                                case 'segmentationLevel'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'identificationMode'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        2 * numFiles,...
                                        {'Connectivity','Size'});
                                case 'thresholdMode'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        2 * numFiles,...
                                        {'Fixed','Relative'});
                                case 'thresholdMultiplier'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'clearBorder'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        2 * numFiles,...
                                        {'true','false'});
                                case 'maxClearParticleSize'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'maxClearSearchRadius'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'clusterParamD'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'clusterParamS'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'maxStructureSize'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'minSize'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                case 'maxSize'
                                    [returnFlag,identificationParam] = StructAssigner(app,...
                                        identificationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        2 * numFiles,...
                                        0,...
                                        NaN);
                                otherwise
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{1})];
                                    return;
                            end
                            if returnFlag
                                return;
                            end
                        else
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{2})];
                            return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            case 'o'
                
                %% reading options settings
                switch currentLine(1:8)
                    case 'options.'
                        seperator = strfind(currentLine(9:end),'=');
                        if ~isempty(seperator)
                            subParam = currentLine(9:9 + seperator(1) - 2);
                            value = strsplit(currentLine(9 + seperator(1):end),';');
                            switch subParam
                                case {'displayImages','displayPlots','exportRawData','exportImages','exportPlots','GPUComputingEnabled','parallelComputingEnabled'}
                                    [returnFlag,options] = StructAssigner(app,...
                                        options,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        2 * numFiles,...
                                        {'true','false'});
                                otherwise
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{1})];
                                    return;
                            end
                            if returnFlag
                                return;
                            end
                        else
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{2})];
                            return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            case 'p'
                switch currentLine(1:2)
                    case 'pl'
                        
                        %% reading plotting parameters
                        switch currentLine(1:14)
                            case 'plottingParam.'
                                seperator = strfind(currentLine(15:end),'=');
                                if ~isempty(seperator)
                                    subParam = currentLine(15:15 + seperator(1) - 2);
                                    value = strsplit(currentLine(15 + seperator(1):end),';');
                                    switch subParam
                                        case 'plot'
                                            switch value{1}
                                                case {'true','false'}
                                                    plottingParam.plot = value{1};
                                                otherwise
                                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                                        sprintf('%s',msg{4})];
                                                    return;
                                            end
                                        case 'length'
                                            currentValue = str2double(value);
                                            if ~isnan(currentValue)
                                                plottingParam.length = currentValue;
                                            else
                                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                                    sprintf('%s',msg{4})];
                                                return;
                                            end
                                        case 'width'
                                            currentValue = str2double(value);
                                            if ~isnan(currentValue)
                                                plottingParam.width = currentValue;
                                            else
                                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                                    sprintf('%s',msg{4})];
                                                return;
                                            end
                                        case 'fontSize'
                                            currentValue = str2double(value);
                                            if ~isnan(currentValue)
                                                plottingParam.fontSize = currentValue;
                                            else
                                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                                    sprintf('%s',msg{4})];
                                                return;
                                            end
                                        case 'numGraphs'
                                            currentValue = str2double(value);
                                            if ~isnan(currentValue)
                                                plottingParam.numGraphs = currentValue;
                                            else
                                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                                    sprintf('%s',msg{4})];
                                                return;
                                            end
                                        case 'includeBinned'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                {'true','false'});
                                        case 'normalize'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                {'true','false'});
                                        case 'addLegend'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                {'true','false'});
                                        case 'flip'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                {'true','false'});
                                        case 'addBox'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                {'true','false'});
                                        case 'split'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                {'true','false'});
                                        case 'files'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'numerical',...
                                                plottingParam.numGraphs,...
                                                1,...
                                                2 * numFiles);
                                        case 'rowId'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'numerical',...
                                                plottingParam.numGraphs,...
                                                1,...
                                                inf);
                                        case 'colId'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'numerical',...
                                                plottingParam.numGraphs,...
                                                1,...
                                                inf);
                                        case 'label'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'binNum'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'shapes'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'stringArray',...
                                                plottingParam.numGraphs,...
                                                shapes);
                                        case 'rowNum'
                                            currentValue = str2double(value);
                                            if ~isnan(currentValue) && currentValue <= plottingParam.numGraphs
                                                plottingParam.rowNum = currentValue;
                                            else
                                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                                    sprintf('%s',msg{4})];
                                                return;
                                            end
                                        case 'xDescriptor'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'yDescriptor'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'map'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                constantFetcherFn('map'));
                                        case 'fill'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                constantFetcherFn('fill'));
                                        case 'subType'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'fit'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'equation'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'xLine'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        case 'yLine'
                                            [returnFlag,plottingParam] = StructAssigner(app,...
                                                plottingParam,...
                                                subParam,...
                                                value,...
                                                'string',...
                                                plottingParam.numGraphs,...
                                                '');
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{1})];
                                            return;
                                    end
                                    if returnFlag
                                        return;
                                    end
                                else
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{2})];
                                    return;
                                end
                            otherwise
                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                    sprintf('%s',msg{3})];
                                return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            case 's'
                
                %% reading options settings
                switch currentLine(1:16)
                    case 'simulationParam.'
                        seperator = strfind(currentLine(17:end),'=');
                        if ~isempty(seperator)
                            subParam = currentLine(17:17 + seperator(1) - 2);
                            value = strsplit(currentLine(17 + seperator(1):end),';');
                            switch subParam
                                case 'simulate'
                                    switch value{1}
                                        case {'true','false'}
                                            simulationParam.simulate = value{1};
                                        otherwise
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{4})];
                                            return;
                                    end
                                case 'simulationMode'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        numFiles,...
                                        {'Random','Structured'});
                                case 'pixelSize'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'segment'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        numFiles,...
                                        {'true','false'});
                                case 'segmentationLevel'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'numCycle'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'photonCount'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'labelLength'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'lateralPrecision'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'numFluorophore'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'numEpitope'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'numStructure'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'structureSize'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0,...
                                        NaN);
                                case 'labelingEfficiency'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'numerical',...
                                        numFiles,...
                                        0.1,...
                                        1);
                                case 'rotationEnabled'
                                    [returnFlag,simulationParam] = StructAssigner(app,...
                                        simulationParam,...
                                        subParam,...
                                        value,...
                                        'string',...
                                        numFiles,...
                                        {'true','false'});
                                otherwise
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{1})];
                                    return;
                            end
                            if returnFlag
                                return;
                            end
                        else
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{2})];
                            return;
                        end
                    otherwise
                        app.MsgBox.Value = [app.MsgBox.Value ;...
                            sprintf('%s',msg{3})];
                        return;
                end
            otherwise
                app.MsgBox.Value = [app.MsgBox.Value ;...
                    sprintf('%s',msg{3})];
                return;
        end
    end
    lineCount = lineCount + 1;
end

%% closing file
fclose(file);

%% reconfiguring plottingParam and montagingParam
try
    [plottingParam.('graph')] = plottingParam.('file');
    plottingParam = rmfield(plottingParam,'file');
catch
end
try
    [montagingParam.('image')] = montagingParam.('file');
    montagingParam = rmfield(montagingParam,'file');
catch
end

%% copying parameters to UI class public property
app.pr_options = options;
app.pr_simulationParam = simulationParam;
app.pr_identificationParam = identificationParam;
app.pr_analysisParam = analysisParam;
app.pr_classificationParam = classificationParam;
app.pr_clusteringParam = clusteringParam;
app.pr_plottingParam = plottingParam;
app.pr_montagingParam = montagingParam;
app.pr_entryPoint = 'Script';

%% displaying success message
app.MsgBox.Value = [app.MsgBox.Value ;...
    sprintf('%s','ASAP message: automation script succesfully loaded.')];

%%====================StructAssigner=====================%%
function [returnFlag,param] = StructAssigner(app,param,subParam,value,expressionType,checkVal,varargin)
global msg;
returnFlag = false;
if (~isempty(value) && iscell(value))
    accumCount = 0;
    for index = 1 : numel(value)
        subValue = strsplit(value{index},{'->',':'});
        beginIndex = 0;
        endIndex = 0;
        for subIndex = 1 : numel(subValue)
            if subIndex == 1
                
                % reading first bound
                subSubValue = str2double(subValue{subIndex});
                if ~isnan(subSubValue)
                    beginIndex = subSubValue;
                else
                    returnFlag = true;
                    app.MsgBox.Value = [app.MsgBox.Value ;...
                        sprintf('%s',msg{4})];
                    return;
                end
            elseif subIndex == 2
                
                % reading second bound
                subSubValue = str2double(subValue{subIndex});
                if ~isnan(subSubValue)
                    endIndex = subSubValue;
                else
                    returnFlag = true;
                    app.MsgBox.Value = [app.MsgBox.Value ;...
                        sprintf('%s',msg{4})];
                    return;
                end
                if beginIndex > endIndex
                    returnFlag = true;
                    app.MsgBox.Value = [app.MsgBox.Value ;...
                        sprintf('%s',msg{7})];
                    return;
                end
            else
                
                % reading value
                switch expressionType
                    
                    case 'string'
                        
                        % from a string
                        subSubValue = subValue{subIndex};
                        caseExpression = varargin{1};
                        if ~isempty(caseExpression)
                            switch subSubValue
                                case caseExpression
                                    for currentIndex = beginIndex : endIndex
                                        param.file(currentIndex).(subParam) = subSubValue;
                                    end
                                otherwise
                                    returnFlag = true;
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{4})];
                                    return;
                            end
                        else
                            for currentIndex = beginIndex : endIndex
                                param.file(currentIndex).(subParam) = subSubValue;
                            end
                        end
                        
                    case 'numerical'
                        
                        % from a numerical
                        subSubValue = str2double(subValue{subIndex});
                        lowerLimit = varargin{1};
                        upperLimit = varargin{2};
                        if ~isnan(subSubValue) && subSubValue >= lowerLimit && (isnan(upperLimit) || (~isnan(upperLimit) && subSubValue < upperLimit))
                            for currentIndex = beginIndex : endIndex
                                param.file(currentIndex).(subParam) = subSubValue;
                            end
                        else
                            returnFlag = true;
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{4})];
                            return;
                        end
                        
                    case 'stringArray'
                        
                        % from an array of strings
                        subSubValue = strsplit(subValue{subIndex},',');
                        caseExpression = varargin{1};
                        if ~isempty(caseExpression)
                            for subSubIndex = 1 : numel(subSubValue)
                                switch subSubValue{subSubIndex}
                                    case caseExpression
                                        for currentIndex = beginIndex : endIndex
                                            param.file(currentIndex).(subParam){subSubIndex} = subSubValue{subSubIndex};
                                        end
                                    otherwise
                                        returnFlag = true;
                                        app.MsgBox.Value = [app.MsgBox.Value ;...
                                            sprintf('%s',msg{4})];
                                        return;
                                end
                            end
                        else
                            for subSubIndex = 1 : numel(subSubValue)
                                for currentIndex = beginIndex : endIndex
                                    param.file(currentIndex).(subParam){subSubIndex} = subSubValue{subSubIndex};
                                end
                            end
                        end
                        
                    case 'numericalArray'
                        
                        % from an array of numericals
                        if numel(subValue) == 4
                            subSubValue = str2double(subValue(3:4));
                            lowerLimit = varargin{1};
                            upperLimit = varargin{2};
                            if ~isnan(subSubValue(1)) && ~isnan(subSubValue(2)) && subSubValue(1) >= lowerLimit && subSubValue(2) >= lowerLimit && (isnan(upperLimit) || (~isnan(upperLimit) && subSubValue(1) <= upperLimit && subSubValue(2) <= upperLimit))
                                for currentIndex = beginIndex : endIndex
                                    param.file(currentIndex).(subParam) = subSubValue(1):subSubValue(2);
                                end
                            else
                                returnFlag = true;
                                app.MsgBox.Value = [app.MsgBox.Value ;...
                                    sprintf('%s',msg{4})];
                                return;
                            end
                        else
                            returnFlag = true;
                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                sprintf('%s',msg{4})];
                            return;
                        end
                        
                    case 'stringArrayAssignment'
                        
                        % from an array of strings for classification
                        % assignment
                        subSubValue = strsplit(subValue{subIndex},'/');
                        caseExpression = varargin{1};
                        if ~isempty(caseExpression)
                            for subSubIndex = 1 : numel(subSubValue)
                                subSubSubValue = strsplit(subSubValue{subSubIndex},',');
                                for subSubSubIndex = 1 : numel(subSubSubValue)
                                    switch subSubSubValue{subSubSubIndex}
                                        case caseExpression
                                            for currentIndex = beginIndex : endIndex
                                                assignmentCheckVal = param.file(currentIndex).assignmentNum;
                                                if numel(subSubValue) == assignmentCheckVal
                                                    param.file(currentIndex).assignment(subSubIndex).(subParam){subSubSubIndex} = subSubSubValue{subSubSubIndex};
                                                else
                                                    returnFlag = true;
                                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                                        sprintf('%s',msg{6})];
                                                    return;
                                                end
                                            end
                                        otherwise
                                            returnFlag = true;
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{4})];
                                            return;
                                    end
                                end
                            end
                        else
                            for subSubIndex = 1 : numel(subSubValue)
                                subSubSubValue = strsplit(subSubValue{subSubIndex},',');
                                for subSubSubIndex = 1 : numel(subSubSubValue)
                                    for currentIndex = beginIndex : endIndex
                                        assignmentCheckVal = param.file(currentIndex).assignmentNum;
                                        if numel(subSubValue) == assignmentCheckVal
                                            param.file(currentIndex).assignment(subSubIndex).(subParam){subSubSubIndex} = subSubSubValue{subSubSubIndex};
                                        else
                                            returnFlag = true;
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{6})];
                                            return;
                                        end
                                    end
                                end
                            end
                        end
                        
                    case 'numericalArrayAssignment'
                        
                        % from an array of numericals for classification
                        % assignment
                        subSubValue = strsplit(subValue{subIndex},'/');
                        for subSubIndex = 1 : numel(subSubValue)
                            subSubSubValue = str2double(strsplit(subSubValue{subSubIndex},','));
                            for subSubSubIndex = 1 : numel(subSubSubValue)
                                if ~isnan(subSubSubValue(subSubSubIndex))
                                    for currentIndex = beginIndex : endIndex
                                        assignmentCheckVal = param.file(currentIndex).assignmentNum;
                                        if numel(subSubValue) == assignmentCheckVal
                                            param.file(currentIndex).assignment(subSubIndex).(subParam)(subSubSubIndex) = subSubSubValue(subSubSubIndex);
                                        else
                                            returnFlag = true;
                                            app.MsgBox.Value = [app.MsgBox.Value ;...
                                                sprintf('%s',msg{6})];
                                            return;
                                        end
                                    end
                                else
                                    returnFlag = true;
                                    app.MsgBox.Value = [app.MsgBox.Value ;...
                                        sprintf('%s',msg{4})];
                                    return;
                                end
                            end
                        end
                end
            end
        end
        accumCount = accumCount + (endIndex - beginIndex) + 1;
    end
    
    % checking if bounds are correct
    if accumCount > checkVal && ~isnan(checkVal)
        returnFlag = true;
        app.MsgBox.Value = [app.MsgBox.Value ;...
            sprintf('%s',msg{7})];
        return;
    end
else
    returnFlag = true;
    app.MsgBox.Value = [app.MsgBox.Value ;...
        sprintf('%s',msg{4})];
    return;
end
